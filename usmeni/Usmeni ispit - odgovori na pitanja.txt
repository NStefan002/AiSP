        MINIMALNI NIVO

1. Induktivno-rekurzivna konstrukcija algoritma, u svom osnovnom obliku, podrazumeva
   da se resenje problema vece dimenzije pronalazi tako sto umemo da resimo problem
   istog oblika, ali manje dimenzije. Za pocetne dimenzije problema resenje racunamo
   direktno (ne svodimo ga dalje na probleme manje dimenzije).

2. Invarijanta petlje je logicki uslov koji povezuje promenljive i vazi tokom citavog
   izvrsavanja petlje (neposredno pre ulaska u petlju, pre i nakon izvrsavanja svakog
   koraka petlje i pre izlaska iz petlje).

   <inicijalizacija promenljivih>
   // ! vazi invarijanta !
   while (<uslov>)
   {
       // ! vazi i uslov i invarijanta !
       <telo petlje>
       // ! vazi invarijanta !
   }
   // ne vazi uslov, vazi invarijanta

3. Najcesce se razmatraju dve vrste slozenosti:
        - vremenska slozenost
        - prostorna (memorijska) slozenost

   Cesto je sasvim u redu biti veoma grub u proceni i samo oceniti asimptotsko ponašanje
   funkcije koja opisuje zavisnost izmedju potrebne kolicine resursa od date veličine
   ulaza (obicno u najgorem slucaju), zanemarujuci konstantne faktore (npr. da li je jedan
   program uvek dva puta sporiji od drugog nije bitno u ovakvim procenama, samo je bitno
   da li kolicina resursa kod oba programa linearno zavisi od dimenzije ulaza).

   Posto nas najcesce zanima samo gornja granica utrosenih resursa, koristi se O-notacija:
   funkcija f je O(g) ako "f ne raste asimptotski brže od g" tj. ako postoji konstanta C
   tako da je za svako n pocevsi od nekog n_0 važi da je f(n) <= C * g(n).

   Pored О-notacije koriste se i Ω-notacija koja daje donju granicu ("f ne raste asimptotski
   sporije od g") i θ-notacija koja daje precizan opis asimptotskog ponašanja ("f raste
   asimptotski istom brzinom kao g").
4.

5. *nisam siguran sta se tacno trazi u zadatku
   Neke ceste klase slozenosti i primeri algoritama koji spadaju u te klase:

    - O(log(n)) binarna pretraga, pronalazak elementa u binarnom pretrazivackom stablu (balansiranom)
    - O(n) ucitavanje niza elemenata, pronalazak elementa u nesortiranom nizu
    - O(nlog(n)) napredni algoritmi za sortiranje
    - O(2^n) generisanje kombninatornih objekata
    - O(sqrt(n)), O(n^2), O(n^3) primeri se mogu naci u narednom zadatku

6. Slozenost nekih cestih oblika petlji:

    O(n):
    for (int i = 0; i < n; i++)
        // kod sloenosti O(1)

    for (int i = 0; i < n; i += 2)
        // kod sloenosti O(1)
    (slozenost je ista kao u prethodnom primeru samo se konstantni faktor razlikuje)

    for (int i = 0, j = n - 1; i < j; i++, j--)
        // kod sloenosti O(1)
    (isto kao u prethodnom primeru)

    O(n - m):
    for (int i = m; i < n; i++)
        // kod sloenosti O(1)

    O(n^2):
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            // kod sloenosti O(1)

    for (int i = 0; i < n; i++)
        for (int j = i + 1; j < n; j++)
            // kod sloenosti O(1)
    (slozenost je ista kao u prethodnom primeru samo se konstantni faktor razlikuje)

    O(mn):
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            // kod sloenosti O(1)

    O(n^3):
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            for (int k = 0; k < n; k++)
                // kod sloenosti O(1)

    for (int i = 0; i < n; i++)
        for (int j = i + 1; j < n; j++)
            for (int k = j + 1; k < n; k++)
                // kod sloenosti O(1)
    (slozenost je ista kao u prethodnom primeru samo se konstantni faktor razlikuje)

    O(m + n):
    for (int i = 0; i < m; i++)
        // kod sloenosti O(1)

    for (int i = 0; i < n; i++)
        // kod sloenosti O(1)

    O(sqrt(n)):
    for (int i = 0; i * i < n; i++)
        // kod sloenosti O(1)

    O(log(n)):
    for (int i = 0; i < n; i *= 2)
        // kod sloenosti O(1)

    !! Voditi racuna o skrivenoj slozenosti !!


7. Master teorema:
    Resenje rekurentne relacije T(n) = aT(n/b) + c * n^k, gde su
    a i b celobrojne konstante vece ili jednake od 1, a c i k
    pozitivne realne konstante

            |- TETA(n ^ log_b(a)), ako je log_b(a) > k
    T(n) = -|- TETA(n ^ k * log(n)), ako je log_b(a) = k
            |- TETA(n ^ k), ako je log_b(a) < k

    ili:
            |- TETA(n ^ k * log(n)), ako je log_b(a) = k
    T(n) = -|
            |- TETA(n ^ m), gde je m = max{log_b(a), k}

8. Neki od primera su uradjeni za naredni zadatak.

9. ./primeri/minimalni_nivo/9(Eratostenovo_sito).cpp
   ./primeri/minimalni_nivo/9(prost_broj).cpp

10. Ilustrovati na primeru najveci zbir prefiksa.
    (../petlja/Slozenost izracunavanja/Inkrementalnost/Inkrementalnost zbira i proizvoda/najveci_zbir_prefiksa.cpp)

11. Ilustrovati na primeru aritmeticki trougao.
    (../petlja/Slozenost izracunavanja/Zamena iteracije formulom/aritmeticki_trougao.cpp)

19. Hesiranje:
    - koristi se za implementaciju hash mapa, skupova itd.
    - omogucava efikasno pronalazenje elementa strukture podataka (O(1), uz malo veci konstanti faktor)
    - dobra hash funkcija treba da bude brza (sto manji konstantni faktor) i da minimalizuje broj kolizija
    - razresavanje kolizija:
        1) odvojeno ulancavanje:
            * na svakoj poziciji u hash tabeli se formira lista elemenata kod kojih je doslo do kolizije,
            tabela se prosiruje kada liste dostignu odredjeni broj elemenata ili kada se popuni odredjeni
            procenat tabele (ove stavke zavise od konkretne implementacije)
        2) otvoreno adresiranje:
            * elementi se smestaju iskljucivo u hash tabelu
            * prilikom realokacije hash tabele hash kodovi se racunaju iz pocetka
            *1) linearno popunjavanje (najcesce se koristi, dobre performanse za savremeni hardver, kes memoriju,
            stvara sekundarne kolizije, kada je tabela malo vise popunjena pogorsavaju se performanse)
            *2) kvadratno popunjavanje
            *3) dvostruko hesiranje (dve hash funkcije)

25. ./primeri/minimalni_nivo/25(quick_sort).cpp




        OSNOVNI NIVO

1. ./primeri/osnovni_nivo/1.cpp

2.

3.

4.

5. ./primeri/osnovni_nivo/5(maksimalni_zbir_segmenta).cpp

6. ./primeri/osnovni_nivo/6(uvecavanje_segmenta).cpp

7. ./primeri/osnovni_nivo/7(grupisanje_bliskih_vrednosti).cpp
   ./primeri/osnovni_nivo/7(obrada_duplikata).cpp

8. ./primeri/osnovni_nivo/8(anagrami).cpp
   ./primeri/osnovni_nivo/8(svodjenje_na_kanonski_oblik).cpp

9. ./primeri/osnovni_nivo/9(objedinjavanje_sortiranih_nizova).cpp

11. ./primeri/osnovni_nivo/11(istorija_veb_pregledaca).cpp
    ./primeri/osnovni_nivo/11(push_pop_rekonstrukcija).cpp
    ./primeri/osnovni_nivo/11(uparenost_zagrada).cpp

12. ./primeri/osnovni_nivo/12(duplikati).cpp
    ./primeri/osnovni_nivo/12(tree_sort).cpp
    ./primeri/osnovni_nivo/12(broj_razlicitih_duzina_duzi).cpp

13. ./primeri/osnovni_nivo/13(prebrojavanje_reci).cpp
    ./primeri/osnovni_nivo/13(broj_segmenata_sa_razlicitim_elementima).cpp
    ./primeri/osnovni_nivo/13(segment_datog_zbira_u_nizu_celih_brojeva).cpp

14. ./primeri/osnovni_nivo/14(poslednjih_k_linija).cpp
    ./primeri/osnovni_nivo/14(maksimalna_bijekcija).cpp TODO
    ./primeri/osnovni_nivo/14(segment_duzine_k_najveceg_proseka).cpp

15.

16. ./primeri/osnovni_nivo/16(zbir_k_najboljih).cpp
    ./primeri/osnovni_nivo/16(sortiranje_brojeva).cpp

17.

18.

19.

20.

21.

22. ./primeri/osnovni_nivo/22(sve_varijacije).cpp
    ./primeri/osnovni_nivo/22(svi_podskupovi_leksikografski).cpp

23. ./primeri/osnovni_nivo/23(sledeca_kombinacija).cpp

24. ./primeri/osnovni_nivo/24(sve_permutacije).cpp

25. ./primeri/osnovni_nivo/25(rasporedjivanje_n_dama_na_sahovskoj_tabli).cpp

26. ./primeri/osnovni_nivo/26(bojenje_grafa_sa_tri_boje).cpp

27. ./primeri/osnovni_nivo/27(fibonaci_memo).cpp
    ./primeri/osnovni_nivo/27(fibonaci_dp).cpp

28. ./primeri/osnovni_nivo/28(edit_rastojanje).cpp

29. ./primeri/osnovni_nivo/29(broj_kombinacija_memo).cpp
    ./primeri/osnovni_nivo/29(broj_kombinacija_dp).cpp
